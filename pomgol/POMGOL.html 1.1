<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <title>Pong Neon</title>
  <style>
    body {
      margin: 0;
      background: radial-gradient(circle at center, #111 0%, #000 100%);
      color: #fff;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      overflow: hidden;
      text-align: center;
    }

    h1 {
      font-size: 42px;
      color: #0ff;
      text-shadow: 0 0 12px #0ff, 0 0 24px #0ff;
      margin-top: 20px;
    }

    #ui {
      margin: 10px;
      display: flex;
      justify-content: center;
      gap: 12px;
      align-items: center;
    }

    canvas {
      background: rgba(0, 0, 0, 0.85);
      display: block;
      margin: 20px auto;
      border: 3px solid #0ff;
      box-shadow: 0 0 25px #0ff, inset 0 0 15px #0ff;
      border-radius: 12px;
    }

    button {
      padding: 10px 16px;
      border-radius: 8px;
      border: none;
      font-weight: bold;
      background: linear-gradient(135deg, #0ff, #09f);
      color: #000;
      cursor: pointer;
      font-size: 16px;
      transition: 0.25s;
      box-shadow: 0 0 10px #0ff, 0 0 20px #09f;
    }

    button:hover {
      transform: scale(1.08);
      box-shadow: 0 0 15px #0ff, 0 0 30px #09f;
    }

    .hint {
      font-size: 14px;
      color: #bbb;
      text-shadow: 0 0 6px #0ff;
    }

    /* --- Tela inicial --- */
    #startScreen {
      position: fixed;
      inset: 0;
      background: linear-gradient(135deg, #000 0%, #111 50%, #000 100%);
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      z-index: 10;
      animation: bgPulse 6s infinite alternate;
    }

    @keyframes bgPulse {
      0% { background: linear-gradient(135deg, #000, #111, #000); }
      100% { background: linear-gradient(135deg, #001, #112, #001); }
    }

    .menu-btn {
      margin: 12px;
      padding: 14px 24px;
      font-size: 18px;
      border-radius: 10px;
      border: none;
      background: linear-gradient(135deg, #f0f, #90f);
      color: #fff;
      font-weight: bold;
      cursor: pointer;
      transition: 0.3s;
      box-shadow: 0 0 12px #f0f, 0 0 20px #90f;
    }

    .menu-btn:hover {
      transform: scale(1.1);
      box-shadow: 0 0 20px #f0f, 0 0 35px #90f;
    }
  </style>
</head>
<body>
  <h1>ðŸŽ® Pong Neon</h1>

  <div id="ui" style="display:none">
    <button id="muteBtn">ðŸ”Š Som: ON</button>
    <div class="hint">Esquerda: W/S â€” Direita: â†‘ / â†“</div>
  </div>

  <canvas id="gameCanvas" width="900" height="500"></canvas>

  <!-- Tela inicial -->
  <div id="startScreen">
    <h1>âœ¨ Pong Neon âœ¨</h1>
    <button class="menu-btn" onclick="startGame('single')">ðŸŽ® 1 Jogador</button>
    <button class="menu-btn" onclick="startGame('multi')">ðŸ‘¾ 2 Jogadores</button>
  </div>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    // Jogadores
    const paddleHeight = 100, paddleWidth = 20;
    let playerLeft = { x: 20, y: canvas.height/2 - paddleHeight/2, score: 0, color: "#0ff" };
    let playerRight = { x: canvas.width - paddleWidth - 20, y: canvas.height/2 - paddleHeight/2, score: 0, color: "#f0f" };
    let ball = { x: canvas.width/2, y: canvas.height/2, r: 12, dx: 4, dy: 3 };

    let keys = {};
    document.addEventListener("keydown", e => keys[e.key] = true);
    document.addEventListener("keyup", e => keys[e.key] = false);

    let mode = "single"; // single ou multi

    // --- PartÃ­culas de fundo ---
    const particles = Array.from({length: 40}, () => ({
      x: Math.random()*canvas.width,
      y: Math.random()*canvas.height,
      r: Math.random()*2+1,
      dx: (Math.random()-0.5)*0.5,
      dy: (Math.random()-0.5)*0.5
    }));

    function drawParticles() {
      ctx.fillStyle = "rgba(0,255,255,0.3)";
      particles.forEach(p => {
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.r, 0, Math.PI*2);
        ctx.fill();
        p.x += p.dx; p.y += p.dy;
        if (p.x < 0) p.x = canvas.width;
        if (p.x > canvas.width) p.x = 0;
        if (p.y < 0) p.y = canvas.height;
        if (p.y > canvas.height) p.y = 0;
      });
    }

    function drawPaddle(player) {
      ctx.fillStyle = player.color;
      ctx.shadowColor = player.color;
      ctx.shadowBlur = 15;
      ctx.fillRect(player.x, player.y, paddleWidth, paddleHeight);
      ctx.shadowBlur = 0;
    }

    function drawBall() {
      ctx.beginPath();
      ctx.arc(ball.x, ball.y, ball.r, 0, Math.PI*2);
      ctx.fillStyle = "#fff";
      ctx.shadowColor = "#0ff";
      ctx.shadowBlur = 20;
      ctx.fill();
      ctx.shadowBlur = 0;
      ctx.closePath();
    }

    function resetBall() {
      ball.x = canvas.width/2;
      ball.y = canvas.height/2;
      ball.dx = (Math.random() > 0.5 ? 4 : -4);
      ball.dy = (Math.random() > 0.5 ? 3 : -3);
    }

    // --- Sons (simplificados pra beleza) ---
    let audioCtx, masterGain, isMuted=false;
    function initAudio() {
      if (audioCtx) return;
      audioCtx = new (window.AudioContext||window.webkitAudioContext)();
      masterGain = audioCtx.createGain();
      masterGain.connect(audioCtx.destination);
    }

    function playBeep(freq, dur=0.15, type="sine") {
      if (!audioCtx || isMuted) return;
      const osc = audioCtx.createOscillator();
      const gain = audioCtx.createGain();
      osc.type=type; osc.frequency.value=freq;
      gain.gain.setValueAtTime(0.2, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime+dur);
      osc.connect(gain); gain.connect(masterGain);
      osc.start(); osc.stop(audioCtx.currentTime+dur);
    }

    // --- Jogo ---
    function update() {
      // Esquerda: W/S
      if (keys["w"]) playerLeft.y -= 6;
      if (keys["s"]) playerLeft.y += 6;

      if (mode==="multi") {
        // Direita: â†‘/â†“
        if (keys["ArrowUp"]) playerRight.y -= 6;
        if (keys["ArrowDown"]) playerRight.y += 6;
      } else {
        // Single player: IA simples
        if (ball.y < playerRight.y+40) playerRight.y -= 5;
        else if (ball.y > playerRight.y+60) playerRight.y += 5;
      }

      playerLeft.y = Math.max(0, Math.min(canvas.height-paddleHeight, playerLeft.y));
      playerRight.y = Math.max(0, Math.min(canvas.height-paddleHeight, playerRight.y));

      ball.x += ball.dx;
      ball.y += ball.dy;

      if (ball.y-ball.r<0 || ball.y+ball.r>canvas.height) { ball.dy*=-1; playBeep(500); }

      if (ball.x-ball.r < playerLeft.x+paddleWidth &&
          ball.y>playerLeft.y && ball.y<playerLeft.y+paddleHeight) {
        ball.dx*=-1.07; ball.x=playerLeft.x+paddleWidth+ball.r; playBeep(900);
      }
      if (ball.x+ball.r > playerRight.x &&
          ball.y>playerRight.y && ball.y<playerRight.y+paddleHeight) {
        ball.dx*=-1.07; ball.x=playerRight.x-ball.r; playBeep(900);
      }

      if (ball.x-ball.r<0) { playerRight.score++; resetBall(); playBeep(200,"square"); }
      if (ball.x+ball.r>canvas.width) { playerLeft.score++; resetBall(); playBeep(200,"square"); }
    }

    function drawScore() {
      ctx.font = "34px Arial Black";
      ctx.textAlign="center";
      ctx.fillStyle = "#0ff";
      ctx.shadowColor="#0ff"; ctx.shadowBlur=15;
      ctx.fillText(playerLeft.score, canvas.width/2-60, 50);
      ctx.fillStyle = "#f0f";
      ctx.shadowColor="#f0f"; ctx.shadowBlur=15;
      ctx.fillText(playerRight.score, canvas.width/2+60, 50);
      ctx.shadowBlur=0;
    }

    function draw() {
      ctx.clearRect(0,0,canvas.width,canvas.height);
      drawParticles();
      drawPaddle(playerLeft);
      drawPaddle(playerRight);
      drawBall();
      drawScore();
      update();
    }

    let loopId=null;
    function startLoop() {
      if (loopId) return;
      loopId = setInterval(draw,1000/60);
    }

    // UI
    document.getElementById("muteBtn").onclick=()=>{
      isMuted=!isMuted;
      document.getElementById("muteBtn").textContent=isMuted?"ðŸ”‡ Som: OFF":"ðŸ”Š Som: ON";
      if (masterGain) masterGain.gain.value=isMuted?0:1;
    };

    function startGame(selectedMode) {
      mode=selectedMode;
      document.getElementById("startScreen").style.display="none";
      document.getElementById("ui").style.display="flex";
      initAudio();
      if (audioCtx.state==="suspended") audioCtx.resume();
      startLoop();
    }
  </script>
</body>
</html>
